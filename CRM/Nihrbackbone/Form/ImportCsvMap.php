<?php

use CRM_Nihrbackbone_ExtensionUtil as E;

/**
 * Form to select which csv field goes where
 *
 * @author Erik Hommel <erik.hommel@civicoop.org>
 * @date 18 Mar 2019
 * @license AGPL-3.0
 * @errorrange 1000-1099
 */
class CRM_Nihrbackbone_Form_ImportCsvMap extends CRM_Core_Form {

  private $_tempTableName = NULL;
  private $_volunteerData = [];
  private $_columnHeaders = [];
  private $_sourceDefaults = [];
  private $_projectId = NULL;

  /**
   * Overridden parent method to build the form
   *
   * @throws Exception when table with contents of csv file not found
   */
  public function buildQuickForm() {
    CRM_Utils_System::setTitle(E::ts('NIHR BioResource - Select Fields to Import'));
    $this->setVolunteerData();
    $this->_tempTableName = CRM_Utils_Request::retrieveValue('csv', 'String');
    $this->_projectId = CRM_Utils_Request::retrieveValue('pid', 'Integer');
    if (!$this->_tempTableName) {
      // check if it is in the _submitValues?
      if (isset($this->_submitValues['temp_table_name']) && !empty($this->_submitValues['temp_table_name'])) {
        $this->_tempTableName = $this->_submitValues['temp_table_name'];
      }
      else {
        throw new Exception(E::ts('Could not find the table with the imported csv data in ') . __METHOD__);
      }
    }
    // build elements for each column in the csv import table and where it should go
    $this->addElements();
    $this->addButtons([
      ['type' => 'next', 'name' => E::ts('Import!'), 'isDefault' => TRUE, 'icon' => 'fa-download'],
      ['type' => 'cancel', 'name' => E::ts('Cancel')],
    ]);
    $this->assign('elementNames', $this->getRenderableElementNames());
    parent::buildQuickForm();
  }

  /**
   * Method to set the list of volunteer data available to be imported into
   */
  private function setVolunteerData() {
    $this->_volunteerData = [
      ' - do not import - ',
      'birth date',
      'blood donor IDs',
      'city',
      'consent status',
      'county',
      'country',
      'email',
      'ethnicity',
      'first name',
      'gender',
      'last name',
      'middle name',
      'mobile',
      'NHS number',
      'phone',
      'postcode',
      'recall_group',
      'recallable',
      'sample IDs',
      'skype name',
      'street address',
      ];
  }

  /**
   * Method to build elements (source field + target) for each column
   */
  private function addElements() {
    // get column headers
    $dao = CRM_Core_DAO::executeQuery("SHOW COLUMNS FROM " . $this->_tempTableName);
    while ($dao->fetch()) {
      $sourceName = 'source_' . $dao->Field;
      $targetName = 'target_' . $dao->Field;
      $this->add('hidden', 'project_id');
      $this->add('hidden', 'temp_table_name');
      $this->add('text', $sourceName, E::ts('Source field'), ['readonly' => 'readonly'], FALSE);
      $this->add('select', $targetName, E::ts('Import to'), $this->_volunteerData, TRUE, ['class' => 'crm-select2']);
      $this->_columnHeaders[] = $dao->Field;
      $this->_sourceDefaults[$sourceName] = $dao->Field;
    }
  }

  /**
   * Overridden parent method to set default values
   *
   * @return array|NULL
   */
  public function setDefaultValues() {
    $defaults = $this->_sourceDefaults;
    if (isset($this->_tempTableName) && !empty($this->_tempTableName)) {
      $defaults['temp_table_name'] = $this->_tempTableName;
    }
    if (isset($this->_projectId) && !empty($this->_projectId)) {
      $defaults['project_id'] = $this->_projectId;
    }
    return $defaults;
  }

  /**
   * Overridden parent method to process the submitted form
   */
  public function postProcess() {
    $values = $this->exportValues();
    $values['volunteerData'] = $this->_volunteerData;
    if (isset($values['project_id']) && !empty($values['project_id'])) {
      $importer = new CRM_Nihrbackbone_NihrImport($values);
      $importer->importPVCsvFile($values);
    }
    else {
      Civi::log()->error(E::ts('No project_id found in submitted values in ') . __METHOD__);
    }
    // pass temp table name + mapping to process function
    parent::postProcess();
  }

  /**
   * Overridden parent method for cancel action (remove temp table)
   *
   */
  public function cancelAction() {
    if (isset($this->_submitValues['temp_table_name']) && !empty($this->_submitValues['temp_table_name'])) {
      CRM_Core_DAO::executeQuery("DROP TABLE IF EXISTS " . $this->_submitValues['temp_table_name']);
    }
    parent::cancelAction(); // TODO: Change the autogenerated stub
  }

  /**
   * Get the fields/elements defined in this form.
   *
   * @return array (string)
   */
  public function getRenderableElementNames() {
    // The _elements list includes some items which should not be
    // auto-rendered in the loop -- such as "qfKey" and "buttons".  These
    // items don't have labels.  We'll identify renderable by filtering on
    // the 'label'.
    $elementNames = array();
    foreach ($this->_elements as $element) {
      /** @var HTML_QuickForm_Element $element */
      $label = $element->getLabel();
      if (!empty($label)) {
        $elementNames[] = $element->getName();
      }
    }
    return $elementNames;
  }

  /**
   * Validate if column name is not used more than once unless allowed
   *
   * @param $fields
   * @param $form
   * @param $errors
   */
  public static function validateForm($fields, &$form, &$errors) {
    $allowedNames = ['blood donor IDs', 'sample IDs', ' - do not import - '];
    $allowedIds = [];
    foreach ($form->_volunteerData as $targetId => $targetName) {
      if (in_array($targetName, $allowedNames)) {
        $allowedIds[] = $targetId;
      }
    }
    $singles = [];
    foreach ($fields as $fieldName => $fieldValue) {
      if (substr($fieldName,0,6) == 'target') {
        $singles[] = $fieldValue;
      }
    }
    $uniques = array_unique($singles);
    foreach ($fields as $fieldName => $fieldValue) {
      if (substr($fieldName,0, 6) == 'target') {
        // if field is not in the unique array it is multiple
        if (!in_array($fieldValue, $uniques)) {
          // if it is not one of the allowed multiples, error
          $error = TRUE;
          foreach ($allowedIds as $allowedId) {
            if ($fieldValue === $allowedId) {
              $error = FALSE;
            }
          }
          if ($error) {
            $errors[$fieldName] = E::ts('You can only select this import column once!');
          }
        }
      }
    }
  }
}
